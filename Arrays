1] Majority Element II

link : https://www.geeksforgeeks.org/batch/gfg-160-problems/track/arrays-gfg-160/problem/majority-vote

solution :

class Solution {
    // Function to find the majority elements in the array
    public List<Integer> findMajority(int[] nums) {
        // Your code goes here.
        int n = nums.length;
        int oneThird = n/3;
        
        HashMap<Integer, Integer> map = new HashMap<>();
        
        for(int num:nums) {
            if(map.containsKey(num)) {
                map.put(num, map.get(num)+1);
            } else {
                map.put(num,1);
            }
        }
        
        List<Integer> result = new ArrayList<>();
        
        for(Map.Entry<Integer,Integer> entry : map.entrySet()) {
            if(entry.getValue() > oneThird){
                result.add(entry.getKey());
            }
        }
        return result;
    }
}


2] 3 SUM

link : https://leetcode.com/problems/3sum/description/

class Solution {
    public List<List<Integer>> threeSum(int[] nums) {
        //creating a double list
        List<List<Integer>> list = new ArrayList<>();

        Arrays.sort(nums);
        int n = nums.length;

        for(int i=0; i<n-2; i++) {
            if(i > 0 && nums[i]==nums[i-1])continue;

            int left = i+1;
            int right = n-1;

            while(left < right) {
                int sum = nums[i]+nums[left]+nums[right];

                if(sum == 0) {
                    list.add(Arrays.asList(nums[i],nums[left],nums[right]));

                    while(left < right && nums[left]==nums[left+1])left++;

                    while(left < right && nums[right]==nums[right-1])right--;

                    left++;
                    right--; 
                } else if (sum < 0) {
                    left++;
                } else {
                    right--;
                }
            }
        }
        return list;
    }
}


3] 4 Sum

link : https://leetcode.com/problems/4sum/description/

class Solution {
    public List<List<Integer>> fourSum(int[] nums, int target) {

        int n = nums.length;

        List<List<Integer>> list = new ArrayList<>();
        Arrays.sort(nums);

        for(int i=0; i<n-3; i++) {

            if(i>0 && nums[i] == nums[i-1])continue;

            for(int j=i+1; j<n-2; j++) {

                if(j>i+1 && nums[j]==nums[j-1])continue;

                int left = j+1;
                int right = n-1;

                while(left < right) {
                    long sum = (long)nums[i] + nums[j] + nums[left] + nums[right];

                    if(sum == target) {
                        list.add(Arrays.asList(nums[i],nums[j],
                                                nums[left],nums[right]));

                        while(left < right && nums[left] == nums[left+1]) left++;
                        while(left < right && nums[right] == nums[right-1]) right--;

                        left++;
                        right--;
                    } else if (sum < target) {
                        left++;
                    } else {
                        right--;
                    }
                }
            }
         }
         return list;
    }
}
